// Code generated by MockGen. DO NOT EDIT.
// Source: retriever.go
//
// Generated by this command:
//
//	mockgen -source=retriever.go -package=version -destination=./retriever_mock.go
//

// Package version is a generated GoMock package.
package version

import (
	reflect "reflect"

	version "github.com/hashicorp/go-version"
	gomock "go.uber.org/mock/gomock"
)

// MockRetriever is a mock of Retriever interface.
type MockRetriever struct {
	ctrl     *gomock.Controller
	recorder *MockRetrieverMockRecorder
}

// MockRetrieverMockRecorder is the mock recorder for MockRetriever.
type MockRetrieverMockRecorder struct {
	mock *MockRetriever
}

// NewMockRetriever creates a new mock instance.
func NewMockRetriever(ctrl *gomock.Controller) *MockRetriever {
	mock := &MockRetriever{ctrl: ctrl}
	mock.recorder = &MockRetrieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetriever) EXPECT() *MockRetrieverMockRecorder {
	return m.recorder
}

// RetrieveLatestVersionFromMirror mocks base method.
func (m *MockRetriever) RetrieveLatestVersionFromMirror() (*version.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveLatestVersionFromMirror")
	ret0, _ := ret[0].(*version.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveLatestVersionFromMirror indicates an expected call of RetrieveLatestVersionFromMirror.
func (mr *MockRetrieverMockRecorder) RetrieveLatestVersionFromMirror() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveLatestVersionFromMirror", reflect.TypeOf((*MockRetriever)(nil).RetrieveLatestVersionFromMirror))
}

// RetrievePossibleVersionsFromCache mocks base method.
func (m *MockRetriever) RetrievePossibleVersionsFromCache() ([]string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrievePossibleVersionsFromCache")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// RetrievePossibleVersionsFromCache indicates an expected call of RetrievePossibleVersionsFromCache.
func (mr *MockRetrieverMockRecorder) RetrievePossibleVersionsFromCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrievePossibleVersionsFromCache", reflect.TypeOf((*MockRetriever)(nil).RetrievePossibleVersionsFromCache))
}

// RetrievePossibleVersionsFromMirror mocks base method.
func (m *MockRetriever) RetrievePossibleVersionsFromMirror() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrievePossibleVersionsFromMirror")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrievePossibleVersionsFromMirror indicates an expected call of RetrievePossibleVersionsFromMirror.
func (mr *MockRetrieverMockRecorder) RetrievePossibleVersionsFromMirror() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrievePossibleVersionsFromMirror", reflect.TypeOf((*MockRetriever)(nil).RetrievePossibleVersionsFromMirror))
}

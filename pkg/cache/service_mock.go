// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -package=cache -destination=./service_mock.go
//

// Package cache is a generated GoMock package.
package cache

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRosaCacheService is a mock of RosaCacheService interface.
type MockRosaCacheService struct {
	ctrl     *gomock.Controller
	recorder *MockRosaCacheServiceMockRecorder
}

// MockRosaCacheServiceMockRecorder is the mock recorder for MockRosaCacheService.
type MockRosaCacheServiceMockRecorder struct {
	mock *MockRosaCacheService
}

// NewMockRosaCacheService creates a new mock instance.
func NewMockRosaCacheService(ctrl *gomock.Controller) *MockRosaCacheService {
	mock := &MockRosaCacheService{ctrl: ctrl}
	mock.recorder = &MockRosaCacheServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRosaCacheService) EXPECT() *MockRosaCacheServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRosaCacheService) Get(key string) (any, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRosaCacheServiceMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRosaCacheService)(nil).Get), key)
}

// LoadCache mocks base method.
func (m *MockRosaCacheService) LoadCache() (RosaCache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadCache")
	ret0, _ := ret[0].(RosaCache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadCache indicates an expected call of LoadCache.
func (mr *MockRosaCacheServiceMockRecorder) LoadCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCache", reflect.TypeOf((*MockRosaCacheService)(nil).LoadCache))
}

// Set mocks base method.
func (m *MockRosaCacheService) Set(key string, value []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRosaCacheServiceMockRecorder) Set(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRosaCacheService)(nil).Set), key, value)
}
